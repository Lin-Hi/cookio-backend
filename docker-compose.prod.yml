version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: cookio-postgres
    environment:
      POSTGRES_USER: cookio_user
      POSTGRES_PASSWORD: cookio_secure_password_2024
      POSTGRES_DB: cookio_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - cookio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cookio_user -d cookio_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: cookio-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - cookio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cookio-backend
    environment:
      # database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: cookio_user
      DATABASE_PASSWORD: cookio_secure_password_2024
      DATABASE_NAME: cookio_db

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # JWT
      JWT_SECRET: cookio_jwt_secret_key_2024_very_secure

      # server
      PORT: 8080
      NODE_ENV: production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cookio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  cookio-network:
    driver: bridge